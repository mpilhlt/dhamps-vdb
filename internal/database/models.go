// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package database

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type KeyMethod string

const (
	KeyMethodAuthBearer   KeyMethod = "auth_bearer"
	KeyMethodBodyForm     KeyMethod = "body_form"
	KeyMethodQueryParam   KeyMethod = "query_param"
	KeyMethodCustomHeader KeyMethod = "custom_header"
)

func (e *KeyMethod) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = KeyMethod(s)
	case string:
		*e = KeyMethod(s)
	default:
		return fmt.Errorf("unsupported scan type for KeyMethod: %T", src)
	}
	return nil
}

type NullKeyMethod struct {
	KeyMethod KeyMethod `json:"key_method"`
	Valid     bool      `json:"valid"` // Valid is true if KeyMethod is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullKeyMethod) Scan(value interface{}) error {
	if value == nil {
		ns.KeyMethod, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.KeyMethod.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullKeyMethod) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.KeyMethod), nil
}

type Role string

const (
	RoleOwner  Role = "owner"
	RoleWriter Role = "writer"
	RoleReader Role = "reader"
)

func (e *Role) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Role(s)
	case string:
		*e = Role(s)
	default:
		return fmt.Errorf("unsupported scan type for Role: %T", src)
	}
	return nil
}

type NullRole struct {
	Role  Role `json:"role"`
	Valid bool `json:"valid"` // Valid is true if Role is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRole) Scan(value interface{}) error {
	if value == nil {
		ns.Role, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Role.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Role), nil
}

type ApiStandard struct {
	Handle      string           `json:"handle"`
	Description pgtype.Text      `json:"description"`
	KeyMethod   KeyMethod        `json:"key_method"`
	KeyField    pgtype.Text      `json:"key_field"`
	VectorSize  int32            `json:"vector_size"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
	UpdatedAt   pgtype.Timestamp `json:"updated_at"`
}

type Embedding struct {
	ID           int32            `json:"id"`
	TextID       pgtype.Text      `json:"text_id"`
	Embedding    interface{}      `json:"embedding"`
	EmbeddingDim int32            `json:"embedding_dim"`
	Llmservice   int32            `json:"llmservice"`
	Text         pgtype.Text      `json:"text"`
	Metadata     []byte           `json:"metadata"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
	UpdatedAt    pgtype.Timestamp `json:"updated_at"`
}

type Llmservice struct {
	LlmserviceID int32            `json:"llmservice_id"`
	Handle       string           `json:"handle"`
	Owner        string           `json:"owner"`
	Description  pgtype.Text      `json:"description"`
	Endpoint     string           `json:"endpoint"`
	ApiKey       pgtype.Text      `json:"api_key"`
	ApiStandard  string           `json:"api_standard"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
	UpdatedAt    pgtype.Timestamp `json:"updated_at"`
}

type Project struct {
	ProjectID   int32            `json:"project_id"`
	Handle      string           `json:"handle"`
	Owner       string           `json:"owner"`
	Description pgtype.Text      `json:"description"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
	UpdatedAt   pgtype.Timestamp `json:"updated_at"`
}

type ProjectsLlmservice struct {
	Project    int32            `json:"project"`
	Llmservice int32            `json:"llmservice"`
	CreatedAt  pgtype.Timestamp `json:"created_at"`
	UpdatedAt  pgtype.Timestamp `json:"updated_at"`
}

type User struct {
	Handle    string           `json:"handle"`
	Name      pgtype.Text      `json:"name"`
	Email     string           `json:"email"`
	VdbApiKey string           `json:"vdb_api_key"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

type UsersLlmservice struct {
	User       string           `json:"user"`
	Llmservice int32            `json:"llmservice"`
	Role       Role             `json:"role"`
	CreatedAt  pgtype.Timestamp `json:"created_at"`
	UpdatedAt  pgtype.Timestamp `json:"updated_at"`
}

type UsersProject struct {
	UserHandle string           `json:"user_handle"`
	ProjectID  int32            `json:"project_id"`
	Role       Role             `json:"role"`
	CreatedAt  pgtype.Timestamp `json:"created_at"`
	UpdatedAt  pgtype.Timestamp `json:"updated_at"`
}
